cat /etc/passwd | sort -t ':' -k 3

cat /etc/passwd | sort -t ':' -k 3 -n

cat /etc/passwd | cut -d ':' -f 1,5

cat /etc/passwd | cut -c 2-6

cat /etc/passwd | cut -d ':' -f 1,6
cat /etc/passwd | cut -d ':' -f 1,6 | tr ':' '\t'

cat /etc/passwd | cut -d '/' -f 2

cat /etc/passwd | wc -c
cat /etc/passwd | wc -m //for characters
cat /etc/passwd | wc -l

cat /etc/passwd | head -n 12
cat /etc/passwd | head -c 26
cat /etc/passwd | head -n -4
cat /etc/passwd | tail -n 17
cat /etc/passwd | head -n 49 | tail -n 1
cat /etc/passwd | head -n 13 | tail -n 1 | tail -c 5 | head -c 4


df -P > ~/discSpace.txt

cat discSpace.txt | tail -n +2 | tr -s ' ' | sort -n -t ' ' -k 2
// starts from 2nd row


cat /etc/passwd | cut -d ':' -f 1 > ~/users.txt
cat /etc/passwd | cut -d ':' -f 1 | egrep [[:upper:]]+
cat /etc/passwd | cut -d ':' -f 1 | egrep '^[[:upper:]]*$'
cat /etc/passwd | cut -d ':' -f 1 | tr [a-z] [A-Z]
cat /etc/passwd | cut -d ':' -f 1 | sed 's/\(.*\)/\U\1/g'
 

cat /etc/passwd | egrep $(id -u -n)

cat /etc/passwd | egrep $(id -u -n) -B 2
cat /etc/passwd | egrep $(id -u -n) -B 2 -A 3
cat /etc/passwd | egrep $(id -u -n) -B 2 | head -n 1

cat /etc/passwd | egrep [[:alnum:]]*:x:[[:digit:]]*:[[:digit:]]*:[[:alnum:],\ ]*:[[:alnum:]//]*:/bin/bash -v

Second name bigger than 6 symbols >= 7

cat people.txt | egrep '[[:alnum:]]*:x:[[:digit:]]*:[[:digit:]]*:[[:alnum:]]*[[:space:]][[:alnum:]]{7,}[[:punct:]]*:[[:alnum:]//]*:[[:alnum:]/]*'


cat people.txt | egrep '[[:alnum:]]*:x:[[:digit:]]*:[[:digit:]]*:[[:alnum:]]*[[:space:]][[:alnum:]]{1,7}[[:punct:]]*:[[:alnum:]//]*:[[:alnum:]/]*'


cat people.txt | cut -d ':' -f 5 | egrep '^[[:alpha:]]* [[:alpha:]]{7,}([^[:alpha:]-][[:alpha:]]*)+' | egrep -o '^[[:alpha:] ]*'

cat people.txt | cut -d ':' -f 5 | egrep '^[[:alpha:]]* [[:alpha:]]{1,7}([^[:alpha:]-][[:alpha:]]*)+' | egrep -o '^[[:alpha:] ]*'


//REVISITED /////////////////////////////////////////////////////////////

cat /etc/passwd | egrep "^$(id -u -n)"

cat /etc/passwd | grep -E ':/bin/bash$' 

cat people.txt | cut -d ':' -f 5 | grep -E  '^[[:alpha:]]*[[:blank:]][[:alpha:]]{7,}([[:blank:]][[:alpha:]]*)*' | grep -E '^([[:alpha:]+[[:blank:]]*)*' -o

cat people.txt | cut -d ':' -f 5 | grep -E  '^[[:alpha:]]*[[:blank:]][[:alpha:]]{7,}([[:blank:]][[:alpha:]]*)*' -o

2nd try
cat people.txt | cut -d ':' -f 5 | grep -E '^[[:alpha:]]* [[:alpha:]]{1,5}[^[:alpha:]]' | grep -E  '(^[[:alpha:] -]*)' 

AFTER200
cat people.txt | cut -d ':' -f 5 | egrep -o '^[[:alpha:][:space:]-]*' | egrep '^[[:alpha:]]+[[:space:]][[:alpha:]]{7,}([[:space:]][[:alpha:]]+)*$'

// AWK //////////////////////////////////////////////////////////////////

cat data/emp.data | awk 'BEGIN { i = 0 } { i += 1} END { printf("Number of rows = %d\n", i) }'

cat data/emp.data | awk 'END {print NR}' 

cat data/emp.data | awk 'BEGIN { i = 0 } { i += 1} i == 3 { printf("Third row is: %s\n", $0) }'

cat data/emp.data | awk 'NR == 3 {print $0}' 

cat data/emp.data | awk '{ print $(NF-1) }'

cat data/emp.data | awk 'END {print $(NF)}'

cat data/emp.data | awk '$(NF) > 4 { print $0 } '

cat data/emp.data | awk 'NF > 4 { print $0 }' 

cat data/emp.data | awk '{ print NF }' 

cat data/emp.data | awk 'BEGIN { i = 0 } {i += NF } END { print i }' 

cat data/emp.data | awk 'BEGIN { i = 0 } $0 ~ /Beth/ { i++ } END { printf("Rows with Beth: " i "\n") }'

cat data/emp.data | awk 'BEGIN {max=$3} {if(max < $3) max = $3} END {print max}' 

cat data/emp.data | awk 'BEGIN {max=$3; row = $0} max < $3 {max = $3; row = $0} END {print "Max is: " max ", on row: " row}' 

cat data/emp.data | sed -e s/^M.*// | awk 'NF > 0 {print $0}' 

cat data/emp.data | awk '{print $2, $1}'

// switch 1st and 2nd row //

cat data/emp.data | awk '{temp = $1; $1 = $2; $2 = temp; print $0}'

cat data/emp.data | awk 'BEGIN {row = ""} {for(i = 1; i <= NF; i++) {if(i == 1) row = $2; else if(i == 2) row = row" "$1; else row = row" "$i} print row}'

cat data/emp.data | awk 'BEGIN { i = 0 } {i++; $1 = i; print $0}'

cat data/emp.data | awk '{ $1 = NR; print $0}'

cat data/emp.data | awk '{$2 = ""; print $0 }'

cat data/emp.data | LC_NUMERIC="C" awk '{sum = $2 + $3; printf("Sum: %.2f\n", sum)}'

cat data/emp.data | LC_NUMERIC="C" awk 'BEGIN {sum = 0} {sum += $2 + $3} END { printf("Total sum: %.2f\n", sum)}'

cat data/emp.data | awk 'length($0)>17 {print $0}'

// END AWK /////////////////////////////////////////////////////////////

cat /etc/passwd | cut -d ':' -f 4 | egrep $(id -g)

cat /etc/services | egrep '#' | wc -l
 
find -L /bin -type f -exec file {} ';' 2>/dev/null | egrep 'shell script' | wc -l

find ~ -maxdepth 3 -type d -perm 000 2>/dev/null

//script for file

find ~/dir5 -type f -name 'file[123]' -exec wc -lwm {} ';'

find . -type f -name 'file[123]' -exec cat {} ';' | wc -lwm

find . -type f -name 'file[123]' -exec cat {} ';' | wc -l

sed -i 's:\(.*\):\U\1:g' file2

sed -i 's/1//' file1

cat file{1,2,3} | sed 's:\(.\):\1\n:g' | sort | uniq -c | sort -n -r 

cat file{1,2,3} | sed 's:\(.\):\1\n:g' | egrep . | sort | uniq -c | sort -n -r
///////////////////skips the \n statistic 

cat file{1,2,3} > file123 

cat file1 | sed 's:\(.*\):\L\1:g' > file2


// all
cat people.txt | sed 's:\(.\):\1\n:g' | sort | uniq -c | sort -n -r | egrep 'а' -v | awk 'BEGIN { sum = 0} {sum += $1} END {print sum}'

cat people.txt | sed 's:\(.\):\1\n:g' | egrep 'а' -v | wc -l

//unique
cat people.txt | sed 's:\(.\):\1\n:g' | sort | uniq -c | sort -n -r | egrep 'а' -v | wc -l 

cat people.txt| cut -d ':' -f 5 | sed 's:\(.\):\1\n:g' | sort | uniq | wc -l

cat /etc/passwd | egrep -v 'ов|ев' | cut -d ':' -f5 | egrep '^[^a-zA-Z]' | egrep '^[[:alpha:] ]*' -o

cat people.txt | egrep -v 'ов'

cat people.txt | head -n 46 | awk '{print NR, $0}' | tail -n +28 | cut -d ':' -f 3 | egrep '.$' -o

find /tmp -type f -readable 2>/dev/null | xargs stat -c '%n %a'

find /tmp -type f -readable -printf '%f %m\n' 2>/dev/null | sort -n 

find /home/$(id -u -n) -type f -printf "%T@ %f \n" 2>/dev/null | sort -t ' ' -n -k 1 -r | head | awk '{$1 = ""; print $0}'

find /home/$(id -u -n) -type f -printf "%T@ %f \n" 2>/dev/null | sort -t ' ' -n -k 1 -r | head | cut -d ' ' -f 2-

find /home/$(id -u -n) -type f -printf "%A@ %f \n" 2>/dev/null | sort -t ' ' -n -k 1 -r | head | cut -d ' ' -f 2-

find /usr/include -type f | egrep '\.[ch]$' | wc -l

find /usr/include -type f | egrep '\.[ch]$' | xargs wc -m | tail -n 1 | cut -d ' ' -f 1
/////cut bugs ^

find /usr/include -type f -exec wc -m {} ';' | egrep '\.[ch]$' | awk 'BEGIN {sum = 0} {sum += $1} END {print sum}'

find /usr/include -type f | egrep '\.[ch]$' | xargs wc -l | tail -n 1 | egrep -o [[:digit:]]*

find /usr/include -type f | egrep '\.[ch]$' | xargs cat | wc -l

cat /etc/services | egrep '[[:alpha:]]+' -o | sort | uniq -c | sort -n -r | head | sed 's:^[[:space:]]*::g'
//sed removes the starting tabulation

cat data/mypasswd.txt | cut -d ':' -f 1,6 | grep -E ':/home/SI' | cut -d ':' -f 1 | grep -E -o '[[:digit:]]*' | sort -n > data/si.txt

cat /etc/group | cut -f 1 -d ':' | sed "s/\(.\)$/\1:$(id -g -n)/g" | awk '{FS=":" if($1==$2) {print "Hello, "$1"- I am here"} else {print "Hello, " $1}}'

cat /etc/group | cut -f 1 -d ':' | sed "s/\(.\)$/\1:$(ii -g -n)/g" | awk '{FS=":" if($1==$2) {print "Hello, "$1- I am here"} else {print "Hello, " $1}}'
// with BEGIN ^

cat /etc/group | sed "s/\(.\)$/\1:$(id -g)/g" | awk '{FS=":"; if($3 == $5) {print "Hello, "$1"- I am here"} else {print "Hello, " $1}}'

find /usr -type f | egrep '*\.sh$' | xargs head -n 1 -q | sed 's:#!::g' | sed 's: ::g' | sort | uniq -c | sort -n -r | head -n 1 | sed 's:^[[:space:]]*::g' | cut -d ' ' -f 2

script !! :)

cat /etc/passwd | cut -d ':' -f 4 | sort | uniq -c | sort -n -r | head -n 5 | sed 's:^[[:space:]]*::g' | cut -d ' ' -f 2

// mmin modification in file in minutes, mtime in hours 
// cmin modification in files's innode in minutes, ctime in hours
// +is >= ; - is <= (last 15 minutes); nothing is equal

find /home/$(id -u -n) -mindepth 1 -type f -mmin -15 2>/dev/null > eternity

find /home/$(id -u -n) -mindepth 1 -type f -mmin -15 2>/dev/null | xargs stat -c '%n %Y' 

find /home/$(id -u\n -n) -mindepth 1 -type f -mmin -15 -printf '%p %T@\n' 2>/dev/null

// %p is full name; %P is from starting point; %f is only filename;
// %T@ is in unix time (seconds); @ can be replaced for any format; %t is normal time


cat population.csv | awk -F ',' 'BEGIN {total = 0} $3 == 2016 { total += $4 } END { printf ("%.0f\n", total)}'


//check if directoty is empty

if [ -z find . -mindepth 1 -print -quit ]
if find . -mindepth 1 | head -n 1 | egrep '*' -q  

$? will be 1 if no matches are found and 0 if there is a match

if [ ] --> checks condition
if --> without [] checks the exit status




ccat population.csv | awk -F ',' 'BEGIN {max = 0; year = ""} $1 == "Bulgaria" && max < $4 {max = $4; year = $3} END {print year}'

cat population.csv | awk -F ',' 'BEGIN {max = 0; country = ""} $3 == 2016 && max < $4 {max = $4; country = $1} END {print country}'

cat population.csv | awk -F ',' 'NR == 1 {min = $4; country = $1} $3 == 2016 && min > $4 {min = $4; country = $1} END {print country}'

cat population.csv | awk -F ',' '$3 == 1969 {printf("%s,%d\n",$1,$4)}' | sort -t ',' -n -k 2 -r | awk 'NR == 42 { print $0 }'

cat population.csv | awk -F ',' '$3 == 1969 {printf("%s,%d\n",$1,$4)}' | sort -t ',' -n -k 2 -r | head -n 42 | tail -n -1 | cut -d ',' -f 1

cat population.csv | egrep ,$(cat population.csv | awk -F ',' '$3 == 1969 {print $0}' | sort -n -t ',' -k 4 -r | awk -F ',' 'NR == 42 {print $2}') | awk -F ',' '$3 == 2016 {print $4}'

tar -xzvf songs.tar.gz -C ~/Downloads/songs
// directory that -C goes into must exist
// -x --> tells to dearchive
// -z --> gzip format
// -v --> prints the names on the terminal
// -f --> next is filename to work with

find ~/Downloads/songs -mindepth 1 -printf '%f\n' | awk -F ' - ' '{print $2}' | egrep '^.*\(' -o | sed 's:[[:space:]]*(::'
// notice that egrep must escape ( , but sed must not

find ~/Downloads/songs -mindepth 1 -printf '%f\n' | awk -F ' - ' '{print $2}' | egrep '^.*\(' -o | sed 's:[[:space:]]*(::' | sed 's:\(.*\):\L\1:g' | sed 's:[[:space:]]:_:g' | sort

find ~/Downloads/songs -mindepth 1 -printf '%f\n' | sed 's:.*(\(.*\)).*:\1:' | sort | uniq | sed 's:, :,:' | sort -t ',' -k 2 -n | cut -d ',' -f 1

find ~/Downloads/songs -mindepth 1 -printf '%f\n' | sed 's:^\(.*\) - .*:\1:' | egrep -x 'Beatles|Pink' | sort | uniq -c | sed 's:^[[:space:]]*::'

find ~/Downloads/songs -mindepth 1 -printf '%f\n' | sed 's:^\(.*\) - \(.*\)(.*:\1,\2:' | awk -F ',' '$1 == "Pink" || $1 == "Beatles" {print $2}'

find ~/Downloads/songs -mindepth 1 -printf '%f\n' | sed 's:^\(.*\) - .*:\1:' | sort | uniq | sed 's:[[:space:]]*::g' | xargs mkdir

find /etc -type f -printf '%s %m\n' 2>/dev/null | sort -n -k 1 -r | head -n 1 | cut -d ' ' -f 2 | xargs find ~/Downloads -printf '%f %s %m %c\n' -perm 

cat emails emails2 | egrep  -i '^[a-z0-9_]+([-.][a-z0-9_]+)*@[a-z0-9]+([.-][a-z0-9]+)*(\.[a-z0-9]+)+$'

cat emp.data | tr -s ' ' | awk -F ' ' '{for(i=NF;i>0;i--){printf("%s ",$i)}printf("\n")}' | column -t
// novelty


cat ssa-input.txt | tail -n +3 | egrep 'Array|physicaldrive|Temperature' | sed 's:^[[:space:]]*::' | sed 's:\(Current\|Maximum\) \(Temperature\) \((C)\):\1\2\3:' | awk 'BEGIN {array = ""} {if( $1 == "Array" ) { array = $2 } if( $1 == "physicaldrive") { printf array"-"$2} if( $1 == "CurrentTemperature(C):" ) { printf " "$2} if( $1 == "MaximumTemperature(C):" ) { printf " "$2"\n"}}'
